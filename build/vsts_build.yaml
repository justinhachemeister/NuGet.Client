name: $(SourceBranchName)-$(Date:yyyyMMdd)-$(rev:rr)
phases:

- phase: Initialize_Build
  queue:
    name: VSEng-MicroBuildVS2017
    timeoutInMinutes: 60
    demands: 
      - DotNetFramework
      - msbuild
  
  steps:
  - task: PowerShell@1
    displayName: "Initialize Git Commit Status on GitHub"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
        InitializeAllTestsToPending -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -CommitSha $(Build.SourceVersion)
  
  - task: PowerShell@1
    displayName: "Update Build Number"
    name: "updatebuildnumber"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        $revision = Get-Content $env:BUILDCOUNTERFILE
        $newBuildCounter = [System.Decimal]::Parse($revision)
        $newBuildCounter++
        Set-Content $env:BUILDCOUNTERFILE $newBuildCounter
        Write-Host "##vso[build.updatebuildnumber]$newBuildCounter"
        Write-Host "##vso[task.setvariable variable=BuildNumber;isOutput=true]$newBuildCounter"

  - task: PowerShell@1
    displayName: "Add Build Tags"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.addbuildtag]$env:BUILD_SOURCEVERSIONAUTHOR"
        Write-Host "##vso[build.addbuildtag]$env:BUILD_SOURCEBRANCHNAME" 

- phase: Build_and_UnitTest
  dependsOn: Initialize_Build
  variables:
    BuildNumber: $[dependencies.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
  queue:
    name: VSEng-MicroBuildVS2017
    timeoutInMinutes: 90
    parallel: 2
    matrix:
      RTM:
        BuildRTM: "true"
      NonRTM:
        BuildRTM: "false"
    demands: 
      - DotNetFramework
      - msbuild

  steps:  
  - task: PowerShell@1
    displayName: "Update Build Number"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        Write-Host "##vso[build.updatebuildnumber]$env:BuildNumber"
        gci env:* | sort-object name

  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
      arguments: "-Force -CI"
    displayName: "Run Configure.ps1"

  - task: PowerShell@1
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\ConfigureVstsBuild.ps1"
      arguments: "-BuildCounterFile $(BuildCounterFile) -BuildInfoJsonFile $(BuildInfoJsonFile) -BuildRTM $(BuildRTM) -SkipUpdateBuildNumber"
    displayName: "Configure VSTS CI Environment"

  - task: PowerShell@1
    displayName: "Print Environment Variables"
    inputs:
      scriptType: "inlineScript"
      inlineScript: |
        gci env:* | sort-object name

  - task: MicroBuildLocalizationPlugin@1
    displayName: "Install Localization Plugin"

  - task: MicroBuildSigningPlugin@1
    inputs:
      signType: "$(SigningType)"
      esrpSigning: "true"
    displayName: "Install Signing Plugin"

  - task: MicroBuildSwixPlugin@1
    displayName: "Install Swix Plugin"

  - task: CopyFiles@2
    displayName: "Copy Public Key Files"
    inputs:
      SourceFolder: "$(NuGetSharePublicKeys)"
      Contents: "*.snk"
      TargetFolder: "$(Build.Repository.LocalPath)\\keys"
      CleanTargetFolder: "true"
      OverWrite: "true"
      flattenFolders: "true"

  - task: MSBuild@1
    displayName: "Restore for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:RestoreVS15 /p:BuildNumber=$(BuildNumber) /p:BuildRTM=$(BuildRTM) /v:m"

  - task: MSBuild@1
    displayName: "Build for VS2017"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:BuildVS15NoVSIX /p:NUGET_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\NuGetKey.snk /p:MS_PFX_PATH=$(Build.Repository.LocalPath)\\keys\\35MSSharedLib1024.snk /p:BuildRTM=$(BuildRTM) /p:BuildNumber=$(BuildNumber)"

  - task: MSBuild@1
    displayName: "Localize Assemblies"
    inputs:
      solution: "build\\loc.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Sign Assemblies"
    inputs:
      solution: "build\\sign.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild"

  - task: MSBuild@1
    displayName: "Pack Nupkgs"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:Pack /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:BuildNumber=$(BuildNumber)"

  - task: MSBuild@1
    displayName: "Pack VSIX"
    inputs:
      solution: "build\\build.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:BuildVS15VSIX /p:BuildRTM=$(BuildRTM) /p:ExcludeTestProjects=$(BuildRTM) /p:IsCIBuild=true"
    condition: "and(succeeded(),eq(variables['BuildRTM'], 'false'))"

  - task: MSBuild@1
    displayName: "Generate Build Tools package"
    inputs:
      solution: "setup/Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/p:BuildNumber=$(BuildNumber) /p:IsVsixBuild=true"
    condition: " and(succeeded(), eq(variables['BuildRTM'], 'false'))"

  - task: MSBuild@1
    displayName: "Sign Nupkgs and VSIX"
    inputs:
      solution: "build\\sign.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/t:AfterBuild /p:SignPackages=true"

  - task: CopyFiles@2
    displayName: "Copy Nupkgs"
    inputs:
      SourceFolder: "artifacts\\$(NupkgOutputDir)"
      Contents: "*.nupkg"
      TargetFolder: "$(BuildOutputTargetPath)\\artifacts\\$(VsixPublishDir)\\$(NupkgOutputDir)"

  - task: MSBuild@1
    displayName: "Generate VSMAN file for NuGet Core VSIX"
    inputs:
      solution: "setup\\Microsoft.VisualStudio.NuGet.Core.vsmanproj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Generate VSMAN file for Build Tools VSIX"
    inputs:
      solution: "setup\\Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: PowerShell@1
    displayName: "Create EndToEnd Test Package"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\CreateEndToEndTestPackage.ps1"
      arguments: "-c $(BuildConfiguration) -tv 15 -out $(Build.Repository.LocalPath)\\artifacts\\VS15"
      failOnStandardError: "false"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: CopyFiles@2
    displayName: "Copy NuGet.exe, VSIX and EndToEnd"
    inputs:
      SourceFolder: "artifacts"
      Contents: |
        $(VsixPublishDir)\\NuGet.exe
        $(VsixPublishDir)\\NuGet.pdb
        $(VsixPublishDir)\\NuGet.Mssign.exe
        $(VsixPublishDir)\\NuGet.Mssign.pdb
        $(VsixPublishDir)\\Microsoft.VisualStudio.NuGet.Core.json 
        $(VsixPublishDir)\\NuGet.Tools.vsix
        $(VsixPublishDir)\\EndToEnd.zip 
      TargetFolder: "$(BuildOutputTargetPath)\\artifacts"

  - task: CopyFiles@2
    displayName: "Copy LCG Files"
    inputs:
      SourceFolder: "artifacts\\"
      Contents: "**\\*.lcg"
      TargetFolder: "$(CIRoot)\\PLOC\\$(Build.SourceBranchName)\\$(Build.BuildNumber)"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "

  - task: PowerShell@1
    displayName: "Publish Artifacts to MyGet"
    continueOnError: "true"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\PublishArtifactsFromVsts.ps1"
      arguments: "-NuGetBuildFeedUrl $(NuGetBuildFeed) -NuGetBuildSymbolsFeedUrl $(NuGetBuildSymbolsFeed) -DotnetCoreFeedUrl $(DotnetCoreBuildFeed) -DotnetCoreSymbolsFeedUrl $(DotnetCoreSymbolsFeed) -NuGetBuildFeedApiKey $(NuGetBuildApiKey) -DotnetCoreFeedApiKey $(DotnetCoreFeedApiKey)"
      failOnStandardError: "true"
    condition: " and(succeeded(),eq(variables['PublishArtifactsToMyGet'], 'true'), eq(variables['BuildRTM'], 'false')) "

  - task: MSBuild@1
    displayName: "Collect Build Symbols"
    inputs:
      solution: "build\\symbols.proj"
      msbuildVersion: "15.0"
      configuration: "$(BuildConfiguration)"
      msbuildArguments: "/p:IsSymbolBuild=true"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "
    
  - task: CopyFiles@2
    displayName: "Copy Symbols"
    inputs:
      SourceFolder: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
      Contents: "**\\*"
      TargetFolder: "$(BuildOutputTargetPath)\\symbols"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "      

  - task: ms-vscs-artifact.build-tasks.artifactSymbolTask-1.artifactSymbolTask@0
    displayName: "Publish Symbols on Symweb"
    inputs:
      symbolServiceURI: "https://microsoft.artifacts.visualstudio.com/DefaultCollection"
      requestName: "CollectionId/$(System.CollectionId)/ProjectId/$(System.TeamProjectId)/$(TeamName)/BuildId/$(Build.BuildId)"
      sourcePath: "$(Build.Repository.LocalPath)\\artifacts\\symbolstoindex"
      detailedLog: "true"
      expirationInDays: "45"
      usePat: "false"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true')) "  	

  - task: MicroBuildUploadVstsDropFolder@1
    displayName: "Upload VSTS Drop"
    inputs:
      DropFolder: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
    condition: " and(succeeded(),eq(variables['BuildRTM'], 'false')) "

  - task: PowerShell@1
    displayName: "Validate VSIX Localization"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
      arguments: "-BuildRTM $(BuildRTM) -BuildOutputTargetPath $(BuildOutputTargetPath) -ValidateVsix"
    condition: " and(succeeded(), eq(variables['BuildRTM'], 'false')) "
  
  - task: PowerShell@1
    displayName: "Validate Repository Artifacts Localization"
    inputs:
      scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\BuildValidator.ps1"
      arguments: "-BuildRTM $(BuildRTM) -BuildOutputTargetPath $(BuildOutputTargetPath)"
    condition: " and(succeeded(), eq(variables['BuildRTM'], 'false')) "

  - task: MicroBuildCleanup@1
    displayName: "Perform Cleanup Tasks"

  - task: PowerShell@1
    displayName: "Cleanup on Failure"
    inputs:
      scriptType: "inlineScript"
      arguments: "-BuildOutputTargetPath $(BuildOutputTargetPath)"
      inlineScript: |
        param([string]$BuildOutputTargetPath)
        Get-ChildItem $(BuildOutputTargetPath) -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
        Remove-Item -Path $(BuildOutputTargetPath) -Force -Recurse -ErrorAction SilentlyContinue
    condition: "eq(variables['Agent.JobStatus'], 'Failed')"